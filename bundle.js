!function(t){var n={};function c(e){if(n[e])return n[e].exports;var l=n[e]={i:e,l:!1,exports:{}};return t[e].call(l.exports,l,l.exports,c),l.l=!0,l.exports}c.m=t,c.c=n,c.d=function(t,n,e){c.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},c.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},c.t=function(t,n){if(1&n&&(t=c(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(c.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var l in t)c.d(e,l,function(n){return t[n]}.bind(null,l));return e},c.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return c.d(n,"a",n),n},c.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},c.p="",c(c.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\n\n// using d3 for convenience\n\n//1 - Map\nvar container = d3.select('#first-map-scroll');\nvar graphic = container.select('.scroll__figure');\nvar chart = graphic.select('.figure__chart');\nvar text = container.select('.scroll__text');\nvar step = text.selectAll('.step');\n\n//2 - line graph\nvar container2 = d3.select('#second-map-scroll');\nvar graphic2 = container2.select('.scroll__figure2');\nvar chart2 = graphic2.select('.figure__chart2');\nvar text2 = container2.select('.scroll__text2');\nvar step2 = text2.selectAll('.step2');\n\n//3 - parallax\nvar container3 = d3.select('#third-map-scroll');\nvar graphic3 = container3.select('.scroll__figure3');\nvar chart3 = graphic3.select('.figure__chart3');\nvar text3 = container3.select('.scroll__text3');\nvar step3 = text3.selectAll('.step3');\n\n// initialize the scrollama\nvar scroller = scrollama();\nvar scroller2 = scrollama();\nvar scroller3 = scrollama();\n\n//1\n// generic window resize listener event\nfunction handleResize() {\n\t// 1. update height of step elements\n\tvar stepHeight = Math.floor(window.innerHeight * 0.75);\n\tstep.style('height', stepHeight + 'px');\n\n\t// 2. update width/height of graphic element\n\tvar bodyWidth = d3.select('body').node().offsetWidth;\n\n\tgraphic.style('width', bodyWidth + 'px').style('height', window.innerHeight + 'px');\n\n\tvar chartMargin = 32;\n\tvar textWidth = text.node().offsetWidth;\n\tvar chartWidth = graphic.node().offsetWidth - textWidth - chartMargin;\n\n\tchart.style('width', chartWidth + 'px').style('height', Math.floor(window.innerHeight / 2) + 'px');\n\n\t// 3. tell scrollama to update new element dimensions\n\tscroller.resize();\n}\n\n// scrollama event handlers\nfunction handleStepEnter(response, data) {\n\n\tstep.classed('is-active', function (d, i) {\n\t\treturn i === response.index;\n\t});\n\n\t// update graphic based on step\n\tchart.select('p').text(response.index + 1);\n\t// var someData = d3.csv(\"<LINK TO DATA HERE>\");\n\t// var otherData = d3.json(\"<LINK TO DATA HERE>\");\n\n\t// Promise.all([someData, otherData).then(next);\n\n\t// function next(data) {\n\n\t//   <ENTER FUNCTIONS HERE>\n\t// }\n\n\t// // update graphic1 based on step 1\n\t// if (step._groups[0][0].className === 'step is-active') {\n\t// \ttime_period = \"1\";\n\t// \td3.select('#timeslide')._groups[0][0].value = \"0\";\n\n\t// \tvar val = data.properties.five;\n\n\t// \tif (val != 0) {\n\t// \t\tvar node = svg.append(\"path\")\n\t// \t\t.datum({type:\"Feature\", geometry:{type: \"Point\", coordinates:[data.properties.long,data.properties.lat]}})\n\t// \t\t.attr(\"d\", d3.geoPath(projection).pointRadius(4))\n\t// \t\t.attr(\"fill\", colorRange(val))\n\t// \t\t.attr(\"opacity\", 0.75)\n\t// \t\t.attr(\"class\", \"map-path\")\n\t// \t\t.style('stroke', 'black').style('stroke-width', 0.5);\n\t// \t}\n\n\t// }\n\n\t// // update graphic1 based on step 2\n\t// if (step._groups[0][1].className === 'step is-active') {\n\n\t// }\n\n\t// // update graphic1 based on step 3\n\t// if (step._groups[0][2].className === 'step is-active') {\n\n\t// }\n}\n\nfunction handleContainerEnter(response) {\n\t// response = { direction }\n\n\t// sticky the graphic (old school)\n\tgraphic.classed('is-fixed', true);\n\tgraphic.classed('is-bottom', false);\n}\n\nfunction handleContainerExit(response) {\n\t// response = { direction }\n\n\t// un-sticky the graphic, and pin to top/bottom of container\n\tgraphic.classed('is-fixed', false);\n\tgraphic.classed('is-bottom', response.direction === 'down');\n}\n\n//2\nfunction handleResize2() {\n\n\t// 1. update height of step elements\n\tvar stepHeight2 = Math.floor(window.innerHeight * 0.75);\n\tstep2.style('height', stepHeight2 + 'px');\n\n\t// 2. update width/height of graphic element\n\tvar bodyWidth2 = d3.select('body').node().offsetWidth;\n\n\tgraphic2.style('width', bodyWidth2 + 'px').style('height', window.innerHeight + 'px');\n\n\tvar chartMargin2 = 32;\n\tvar textWidth2 = text2.node().offsetWidth;\n\tvar chartWidth2 = graphic2.node().offsetWidth - textWidth2 - chartMargin2;\n\n\tchart2.style('width', chartWidth2 + 'px').style('height', Math.floor(window.innerHeight2 / 2) + 'px');\n\n\t// 3. tell scrollama to update new element dimensions\n\tscroller2.resize();\n}\n// scrollama event handlers\nfunction handleStepEnter2(response) {\n\n\tstep2.classed('is-active', function (d, j) {\n\t\treturn j === response.index;\n\t});\n\n\t// update graphic based on step\n\tchart2.select('p').text(response.index + 1);\n\t// var someData = d3.csv(\"<LINK TO DATA HERE>\");\n\t// var otherData = d3.json(\"<LINK TO DATA HERE>\");\n\n\t// Promise.all([someData, otherData).then(next);\n\n\t// function next(data) {\n\n\t//   <ENTER FUNCTIONS HERE>\n\t// }\n\n\t// // update graphic1 based on step 1\n\t// if (step._groups[0][0].className === 'step is-active') {\n\n\t// }\n\n\t// // update graphic1 based on step 2\n\t// if (step._groups[0][1].className === 'step is-active') {\n\n\t// }\n\n\t// // update graphic1 based on step 3\n\t// if (step._groups[0][2].className === 'step is-active') {\n\n\t// }\n}\n\nfunction handleContainerEnter2(response) {\n\t// response = { direction }\n\n\t// sticky the graphic (old school)\n\tgraphic.classed('is-fixed', true);\n\tgraphic.classed('is-bottom', false);\n}\n\nfunction handleContainerExit2(response) {\n\t// response = { direction }\n\n\t// un-sticky the graphic, and pin to top/bottom of container\n\tgraphic.classed('is-fixed', false);\n\tgraphic.classed('is-bottom', response.direction === 'down');\n}\n\n//3\nfunction handleResize3() {\n\n\t// 1. update height of step elements\n\tvar stepHeight3 = Math.floor(window.innerHeight * 0.75);\n\tstep3.style('height', stepHeight2 + 'px');\n\n\t// 2. update width/height of graphic element\n\tvar bodyWidth3 = d3.select('body').node().offsetWidth;\n\n\tgraphic3.style('width', bodyWidth2 + 'px').style('height', window.innerHeight + 'px');\n\n\tvar chartMargin3 = 32;\n\tvar textWidth3 = text3.node().offsetWidth;\n\tvar chartWidth3 = graphic3.node().offsetWidth - textWidth3 - chartMargin3;\n\n\tchart3.style('width', chartWidth3 + 'px').style('height', Math.floor(window.innerHeight3 / 2) + 'px');\n\n\t// 3. tell scrollama to update new element dimensions\n\tscroller3.resize();\n}\n// scrollama event handlers\nfunction handleStepEnter3(response) {\n\n\tstep3.classed('is-active', function (d, k) {\n\t\treturn k === response.index;\n\t});\n\n\t// update graphic based on step\n\tchart3.select('p').text(response.index + 1);\n\t// var someData = d3.csv(\"<LINK TO DATA HERE>\");\n\t// var otherData = d3.json(\"<LINK TO DATA HERE>\");\n\n\t// Promise.all([someData, otherData).then(next);\n\n\t// function next(data) {\n\n\t//   <ENTER FUNCTIONS HERE>\n\t// }\n\n\t// // update graphic1 based on step 1\n\t// if (step._groups[0][0].className === 'step is-active') {\n\n\t// }\n\n\t// // update graphic1 based on step 2\n\t// if (step._groups[0][1].className === 'step is-active') {\n\n\t// }\n\n\t// // update graphic1 based on step 3\n\t// if (step._groups[0][2].className === 'step is-active') {\n\n\t// }\n}\n\nfunction handleContainerEnter3(response) {\n\t// response = { direction }\n\n\t// sticky the graphic (old school)\n\tgraphic.classed('is-fixed', true);\n\tgraphic.classed('is-bottom', false);\n}\n\nfunction handleContainerExit3(response) {\n\t// response = { direction }\n\n\t// un-sticky the graphic, and pin to top/bottom of container\n\tgraphic.classed('is-fixed', false);\n\tgraphic.classed('is-bottom', response.direction === 'down');\n}\n\nfunction init() {\n\t// 1. force a resize on load to ensure proper dimensions are sent to scrollama\n\thandleResize();\n\n\t// 2. setup the scroller passing options\n\t// this will also initialize trigger observations\n\t// 3. bind scrollama event handlers (this can be chained like below)\n\tscroller.setup({\n\t\tcontainer: '#main-map-scroll',\n\t\tgraphic: '.scroll__figure',\n\t\ttext: '.scroll__text',\n\t\tstep: '.scroll__text .step',\n\t\toffset: 0.75,\n\t\tdebug: false\n\t}).onStepEnter(handleStepEnter).onContainerEnter(handleContainerEnter).onContainerExit(handleContainerExit);\n\n\tscroller2.setup({\n\t\tcontainer: '#scroll2',\n\t\tgraphic: '.scroll__graphic2',\n\t\ttext: '.scroll__text2',\n\t\tstep: '.scroll__text2 .step2',\n\t\toffset: 0.75,\n\t\tdebug: false\n\t}).onStepEnter(handleStepEnter2)\n\t// .OnStepExit(handleStepExit2)\n\t.onContainerEnter(handleContainerEnter2).onContainerExit(handleContainerExit2);\n\n\tscroller3.setup({\n\t\tcontainer: '#scroll3',\n\t\tgraphic: '.scroll__graphic3',\n\t\ttext: '.scroll__text3',\n\t\tstep: '.scroll__text3 .step3',\n\t\toffset: 0.99,\n\t\tdebug: false\n\t}).onStepEnter(handleStepEnter3)\n\t// .OnStepExit(handleStepExit2)\n\t.onContainerEnter(handleContainerEnter3).onContainerExit(handleContainerExit3);\n\n\t// setup resize event\n\twindow.addEventListener('resize', handleResize);\n}\n\n// kick things off\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);